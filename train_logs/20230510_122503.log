2023/05/10 12:25:04 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.11 (main, Apr  5 2023, 14:15:10) [GCC 9.4.0]
    CUDA available: True
    numpy_random_seed: 32
    GPU 0: Tesla V100-SXM2-16GB
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: x86_64-linux-gnu-gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 2.0.0+cu118
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.1+cu118
    OpenCV: 4.7.0
    MMEngine: 0.7.3

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 32
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/05/10 12:25:04 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 1024))
model = dict(
    type='CascadeEncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(512, 1024)),
    num_stages=2,
    pretrained='open-mmlab://msra/hrnetv2_w18_small',
    backbone=dict(
        type='HRNet',
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        extra=dict(
            stage1=dict(
                num_modules=1,
                num_branches=1,
                block='BOTTLENECK',
                num_blocks=(2, ),
                num_channels=(64, )),
            stage2=dict(
                num_modules=1,
                num_branches=2,
                block='BASIC',
                num_blocks=(2, 2),
                num_channels=(18, 36)),
            stage3=dict(
                num_modules=3,
                num_branches=3,
                block='BASIC',
                num_blocks=(2, 2, 2),
                num_channels=(18, 36, 72)),
            stage4=dict(
                num_modules=2,
                num_branches=4,
                block='BASIC',
                num_blocks=(2, 2, 2, 2),
                num_channels=(18, 36, 72, 144)))),
    decode_head=[
        dict(
            type='FCNHead',
            in_channels=[18, 36, 72, 144],
            channels=270,
            in_index=(0, 1, 2, 3),
            input_transform='resize_concat',
            kernel_size=1,
            num_convs=1,
            concat_input=False,
            dropout_ratio=-1,
            num_classes=2,
            norm_cfg=dict(type='BN', requires_grad=True),
            align_corners=False,
            loss_decode=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
        dict(
            type='OCRHead',
            in_channels=[18, 36, 72, 144],
            in_index=(0, 1, 2, 3),
            input_transform='resize_concat',
            channels=512,
            ocr_channels=256,
            dropout_ratio=-1,
            num_classes=2,
            norm_cfg=dict(type='BN', requires_grad=True),
            align_corners=False,
            loss_decode=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0))
    ],
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'ISICDATASET_'
data_root = '/content/dataset'
crop_size = (512, 1024)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(2048, 1024),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=4,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='ISICDATASET_',
        data_root='/content/dataset',
        data_prefix=dict(
            img_path='images/ISIC2018_Task1-2_Training_Input',
            seg_map_path='groundTruth/ISIC2018_Task1_Training_GroundTruth'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(2048, 1024),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='ISICDATASET_',
        data_root='/content/dataset',
        data_prefix=dict(
            img_path='images/ISIC2018_Task1-2_Validation_Input',
            seg_map_path='groundTruth/ISIC2018_Task1_Validation_GroundTruth'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='ISICDATASET_',
        data_root='/content/dataset',
        data_prefix=dict(
            img_path='images/ISIC2018_Task1-2_Test_Input',
            seg_map_path='groundTruth/ISIC2018_Task1_Test_GroundTruth'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(
    type='IoUMetric',
    iou_metrics=['mIoU'],
    format_only=True,
    output_dir='work_dirs/format_results')
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=True)
log_level = 'INFO'
load_from = 'https://download.openmmlab.com/mmsegmentation/v0.5/ocrnet/ocrnet_hr18s_4xb2-40k_cityscapes-512x1024/ocrnet_hr18s_4xb2-40k_cityscapes-512x1024_20230227_145026-6c052a14.pth'
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(type='LinearLR', by_epoch=False, start_factor=0.1, begin=0, end=200),
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=160,
        by_epoch=False)
]
train_cfg = dict(
    type='EpochBasedTrainLoop', max_epochs=5, val_begin=1, val_interval=1)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=1000, by_epoch=False),
    sampler_seed=dict(type='DistSamplerSeedHook'))
work_dir = './work_dirs/final'
randomness = dict(seed=32)

2023/05/10 12:25:11 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/05/10 12:25:11 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/05/10 12:25:12 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2023/05/10 12:25:12 - mmengine - INFO - load model from: open-mmlab://msra/hrnetv2_w18_small
2023/05/10 12:25:12 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://msra/hrnetv2_w18_small
2023/05/10 12:26:01 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: incre_modules.0.0.conv1.weight, incre_modules.0.0.bn1.weight, incre_modules.0.0.bn1.bias, incre_modules.0.0.bn1.running_mean, incre_modules.0.0.bn1.running_var, incre_modules.0.0.bn1.num_batches_tracked, incre_modules.0.0.conv2.weight, incre_modules.0.0.bn2.weight, incre_modules.0.0.bn2.bias, incre_modules.0.0.bn2.running_mean, incre_modules.0.0.bn2.running_var, incre_modules.0.0.bn2.num_batches_tracked, incre_modules.0.0.conv3.weight, incre_modules.0.0.bn3.weight, incre_modules.0.0.bn3.bias, incre_modules.0.0.bn3.running_mean, incre_modules.0.0.bn3.running_var, incre_modules.0.0.bn3.num_batches_tracked, incre_modules.0.0.downsample.0.weight, incre_modules.0.0.downsample.1.weight, incre_modules.0.0.downsample.1.bias, incre_modules.0.0.downsample.1.running_mean, incre_modules.0.0.downsample.1.running_var, incre_modules.0.0.downsample.1.num_batches_tracked, incre_modules.1.0.conv1.weight, incre_modules.1.0.bn1.weight, incre_modules.1.0.bn1.bias, incre_modules.1.0.bn1.running_mean, incre_modules.1.0.bn1.running_var, incre_modules.1.0.bn1.num_batches_tracked, incre_modules.1.0.conv2.weight, incre_modules.1.0.bn2.weight, incre_modules.1.0.bn2.bias, incre_modules.1.0.bn2.running_mean, incre_modules.1.0.bn2.running_var, incre_modules.1.0.bn2.num_batches_tracked, incre_modules.1.0.conv3.weight, incre_modules.1.0.bn3.weight, incre_modules.1.0.bn3.bias, incre_modules.1.0.bn3.running_mean, incre_modules.1.0.bn3.running_var, incre_modules.1.0.bn3.num_batches_tracked, incre_modules.1.0.downsample.0.weight, incre_modules.1.0.downsample.1.weight, incre_modules.1.0.downsample.1.bias, incre_modules.1.0.downsample.1.running_mean, incre_modules.1.0.downsample.1.running_var, incre_modules.1.0.downsample.1.num_batches_tracked, incre_modules.2.0.conv1.weight, incre_modules.2.0.bn1.weight, incre_modules.2.0.bn1.bias, incre_modules.2.0.bn1.running_mean, incre_modules.2.0.bn1.running_var, incre_modules.2.0.bn1.num_batches_tracked, incre_modules.2.0.conv2.weight, incre_modules.2.0.bn2.weight, incre_modules.2.0.bn2.bias, incre_modules.2.0.bn2.running_mean, incre_modules.2.0.bn2.running_var, incre_modules.2.0.bn2.num_batches_tracked, incre_modules.2.0.conv3.weight, incre_modules.2.0.bn3.weight, incre_modules.2.0.bn3.bias, incre_modules.2.0.bn3.running_mean, incre_modules.2.0.bn3.running_var, incre_modules.2.0.bn3.num_batches_tracked, incre_modules.2.0.downsample.0.weight, incre_modules.2.0.downsample.1.weight, incre_modules.2.0.downsample.1.bias, incre_modules.2.0.downsample.1.running_mean, incre_modules.2.0.downsample.1.running_var, incre_modules.2.0.downsample.1.num_batches_tracked, incre_modules.3.0.conv1.weight, incre_modules.3.0.bn1.weight, incre_modules.3.0.bn1.bias, incre_modules.3.0.bn1.running_mean, incre_modules.3.0.bn1.running_var, incre_modules.3.0.bn1.num_batches_tracked, incre_modules.3.0.conv2.weight, incre_modules.3.0.bn2.weight, incre_modules.3.0.bn2.bias, incre_modules.3.0.bn2.running_mean, incre_modules.3.0.bn2.running_var, incre_modules.3.0.bn2.num_batches_tracked, incre_modules.3.0.conv3.weight, incre_modules.3.0.bn3.weight, incre_modules.3.0.bn3.bias, incre_modules.3.0.bn3.running_mean, incre_modules.3.0.bn3.running_var, incre_modules.3.0.bn3.num_batches_tracked, incre_modules.3.0.downsample.0.weight, incre_modules.3.0.downsample.1.weight, incre_modules.3.0.downsample.1.bias, incre_modules.3.0.downsample.1.running_mean, incre_modules.3.0.downsample.1.running_var, incre_modules.3.0.downsample.1.num_batches_tracked, downsamp_modules.0.0.weight, downsamp_modules.0.0.bias, downsamp_modules.0.1.weight, downsamp_modules.0.1.bias, downsamp_modules.0.1.running_mean, downsamp_modules.0.1.running_var, downsamp_modules.0.1.num_batches_tracked, downsamp_modules.1.0.weight, downsamp_modules.1.0.bias, downsamp_modules.1.1.weight, downsamp_modules.1.1.bias, downsamp_modules.1.1.running_mean, downsamp_modules.1.1.running_var, downsamp_modules.1.1.num_batches_tracked, downsamp_modules.2.0.weight, downsamp_modules.2.0.bias, downsamp_modules.2.1.weight, downsamp_modules.2.1.bias, downsamp_modules.2.1.running_mean, downsamp_modules.2.1.running_var, downsamp_modules.2.1.num_batches_tracked, final_layer.0.weight, final_layer.0.bias, final_layer.1.weight, final_layer.1.bias, final_layer.1.running_mean, final_layer.1.running_var, final_layer.1.num_batches_tracked, classifier.weight, classifier.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.transition1.0.0.weight - torch.Size([18, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.transition1.0.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.transition1.0.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.transition1.1.0.0.weight - torch.Size([36, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.transition1.1.0.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.transition1.1.0.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.0.0.conv1.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.0.0.bn1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.0.0.bn1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.0.0.conv2.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.0.0.bn2.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.0.0.bn2.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.0.1.conv1.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.0.1.bn1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.0.1.bn1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.0.1.conv2.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.0.1.bn2.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.0.1.bn2.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.1.0.conv1.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.1.0.bn1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.1.0.bn1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.1.0.conv2.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.1.0.bn2.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.1.0.bn2.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.1.1.conv1.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.1.1.bn1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.1.1.bn1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.1.1.conv2.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.1.1.bn2.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.branches.1.1.bn2.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.fuse_layers.0.1.0.weight - torch.Size([18, 36, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.fuse_layers.0.1.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.fuse_layers.0.1.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.fuse_layers.1.0.0.0.weight - torch.Size([36, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.fuse_layers.1.0.0.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage2.0.fuse_layers.1.0.0.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.transition2.2.0.0.weight - torch.Size([72, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.transition2.2.0.1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.transition2.2.0.1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.0.0.conv1.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.0.0.bn1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.0.0.bn1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.0.0.conv2.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.0.0.bn2.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.0.0.bn2.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.0.1.conv1.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.0.1.bn1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.0.1.bn1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.0.1.conv2.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.0.1.bn2.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.0.1.bn2.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.1.0.conv1.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.1.0.bn1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.1.0.bn1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.1.0.conv2.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.1.0.bn2.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.1.0.bn2.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.1.1.conv1.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.1.1.bn1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.1.1.bn1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.1.1.conv2.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.1.1.bn2.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.1.1.bn2.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.2.0.conv1.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.2.0.bn1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.2.0.bn1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.2.0.conv2.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.2.0.bn2.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.2.0.bn2.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.2.1.conv1.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.2.1.bn1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.2.1.bn1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.2.1.conv2.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.2.1.bn2.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.branches.2.1.bn2.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.0.1.0.weight - torch.Size([18, 36, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.0.1.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.0.1.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.0.2.0.weight - torch.Size([18, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.0.2.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.0.2.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.1.0.0.0.weight - torch.Size([36, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.1.0.0.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.1.0.0.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.1.2.0.weight - torch.Size([36, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.1.2.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.1.2.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.2.0.0.0.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.2.0.0.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.2.0.0.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.2.0.1.0.weight - torch.Size([72, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.2.0.1.1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.2.0.1.1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.2.1.0.0.weight - torch.Size([72, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.2.1.0.1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.0.fuse_layers.2.1.0.1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.0.0.conv1.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.0.0.bn1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.0.0.bn1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.0.0.conv2.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.0.0.bn2.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.0.0.bn2.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.0.1.conv1.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.0.1.bn1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.0.1.bn1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.0.1.conv2.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.0.1.bn2.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.0.1.bn2.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.1.0.conv1.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.1.0.bn1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.1.0.bn1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.1.0.conv2.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.1.0.bn2.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.1.0.bn2.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.1.1.conv1.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.1.1.bn1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.1.1.bn1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.1.1.conv2.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.1.1.bn2.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.1.1.bn2.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.2.0.conv1.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.2.0.bn1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.2.0.bn1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.2.0.conv2.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.2.0.bn2.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.2.0.bn2.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.2.1.conv1.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.2.1.bn1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.2.1.bn1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.2.1.conv2.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.2.1.bn2.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.branches.2.1.bn2.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.0.1.0.weight - torch.Size([18, 36, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.0.1.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.0.1.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.0.2.0.weight - torch.Size([18, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.0.2.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.0.2.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.1.0.0.0.weight - torch.Size([36, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.1.0.0.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.1.0.0.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.1.2.0.weight - torch.Size([36, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.1.2.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.1.2.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.2.0.0.0.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.2.0.0.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.2.0.0.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.2.0.1.0.weight - torch.Size([72, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.2.0.1.1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.2.0.1.1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.2.1.0.0.weight - torch.Size([72, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.2.1.0.1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.1.fuse_layers.2.1.0.1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.0.0.conv1.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.0.0.bn1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.0.0.bn1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.0.0.conv2.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.0.0.bn2.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.0.0.bn2.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.0.1.conv1.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.0.1.bn1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.0.1.bn1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.0.1.conv2.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.0.1.bn2.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.0.1.bn2.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.1.0.conv1.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.1.0.bn1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.1.0.bn1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.1.0.conv2.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.1.0.bn2.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.1.0.bn2.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.1.1.conv1.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.1.1.bn1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.1.1.bn1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.1.1.conv2.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.1.1.bn2.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.1.1.bn2.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.2.0.conv1.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.2.0.bn1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.2.0.bn1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.2.0.conv2.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.2.0.bn2.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.2.0.bn2.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.2.1.conv1.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.2.1.bn1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.2.1.bn1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.2.1.conv2.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.2.1.bn2.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.branches.2.1.bn2.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.0.1.0.weight - torch.Size([18, 36, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.0.1.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.0.1.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.0.2.0.weight - torch.Size([18, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.0.2.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.0.2.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.1.0.0.0.weight - torch.Size([36, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.1.0.0.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.1.0.0.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.1.2.0.weight - torch.Size([36, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.1.2.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.1.2.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.2.0.0.0.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.2.0.0.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.2.0.0.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.2.0.1.0.weight - torch.Size([72, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.2.0.1.1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.2.0.1.1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.2.1.0.0.weight - torch.Size([72, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.2.1.0.1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage3.2.fuse_layers.2.1.0.1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.transition3.3.0.0.weight - torch.Size([144, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.transition3.3.0.1.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.transition3.3.0.1.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.0.0.conv1.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.0.0.bn1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.0.0.bn1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.0.0.conv2.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.0.0.bn2.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.0.0.bn2.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.0.1.conv1.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.0.1.bn1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.0.1.bn1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.0.1.conv2.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.0.1.bn2.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.0.1.bn2.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.1.0.conv1.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.1.0.bn1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.1.0.bn1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.1.0.conv2.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.1.0.bn2.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.1.0.bn2.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.1.1.conv1.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.1.1.bn1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.1.1.bn1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.1.1.conv2.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.1.1.bn2.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.1.1.bn2.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.2.0.conv1.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.2.0.bn1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.2.0.bn1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.2.0.conv2.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.2.0.bn2.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.2.0.bn2.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.2.1.conv1.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.2.1.bn1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.2.1.bn1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.2.1.conv2.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.2.1.bn2.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.2.1.bn2.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.3.0.conv1.weight - torch.Size([144, 144, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.3.0.bn1.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.3.0.bn1.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.3.0.conv2.weight - torch.Size([144, 144, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.3.0.bn2.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.3.0.bn2.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.3.1.conv1.weight - torch.Size([144, 144, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.3.1.bn1.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.3.1.bn1.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.3.1.conv2.weight - torch.Size([144, 144, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.3.1.bn2.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.branches.3.1.bn2.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.0.1.0.weight - torch.Size([18, 36, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.0.1.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.0.1.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.0.2.0.weight - torch.Size([18, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.0.2.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.0.2.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.0.3.0.weight - torch.Size([18, 144, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.0.3.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.0.3.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.1.0.0.0.weight - torch.Size([36, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.1.0.0.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.1.0.0.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.1.2.0.weight - torch.Size([36, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.1.2.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.1.2.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.1.3.0.weight - torch.Size([36, 144, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.1.3.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.1.3.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.2.0.0.0.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.2.0.0.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.2.0.0.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.2.0.1.0.weight - torch.Size([72, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.2.0.1.1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.2.0.1.1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.2.1.0.0.weight - torch.Size([72, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.2.1.0.1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.2.1.0.1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.2.3.0.weight - torch.Size([72, 144, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.2.3.1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.2.3.1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.0.0.0.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.0.0.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.0.0.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.0.1.0.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.0.1.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.0.1.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.0.2.0.weight - torch.Size([144, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.0.2.1.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.0.2.1.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.1.0.0.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.1.0.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.1.0.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.1.1.0.weight - torch.Size([144, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.1.1.1.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.1.1.1.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.2.0.0.weight - torch.Size([144, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.2.0.1.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.0.fuse_layers.3.2.0.1.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.0.0.conv1.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.0.0.bn1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.0.0.bn1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.0.0.conv2.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.0.0.bn2.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.0.0.bn2.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.0.1.conv1.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.0.1.bn1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.0.1.bn1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.0.1.conv2.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.0.1.bn2.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.0.1.bn2.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.1.0.conv1.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.1.0.bn1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.1.0.bn1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.1.0.conv2.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.1.0.bn2.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.1.0.bn2.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.1.1.conv1.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.1.1.bn1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.1.1.bn1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.1.1.conv2.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.1.1.bn2.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.1.1.bn2.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.2.0.conv1.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.2.0.bn1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.2.0.bn1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.2.0.conv2.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.2.0.bn2.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.2.0.bn2.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.2.1.conv1.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.2.1.bn1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.2.1.bn1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.2.1.conv2.weight - torch.Size([72, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.2.1.bn2.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.2.1.bn2.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.3.0.conv1.weight - torch.Size([144, 144, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.3.0.bn1.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.3.0.bn1.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.3.0.conv2.weight - torch.Size([144, 144, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.3.0.bn2.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.3.0.bn2.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.3.1.conv1.weight - torch.Size([144, 144, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.3.1.bn1.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.3.1.bn1.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.3.1.conv2.weight - torch.Size([144, 144, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.3.1.bn2.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.branches.3.1.bn2.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.0.1.0.weight - torch.Size([18, 36, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.0.1.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.0.1.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.0.2.0.weight - torch.Size([18, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.0.2.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.0.2.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.0.3.0.weight - torch.Size([18, 144, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.0.3.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.0.3.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.1.0.0.0.weight - torch.Size([36, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.1.0.0.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.1.0.0.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.1.2.0.weight - torch.Size([36, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.1.2.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.1.2.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.1.3.0.weight - torch.Size([36, 144, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.1.3.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.1.3.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.2.0.0.0.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.2.0.0.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.2.0.0.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.2.0.1.0.weight - torch.Size([72, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.2.0.1.1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.2.0.1.1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.2.1.0.0.weight - torch.Size([72, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.2.1.0.1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.2.1.0.1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.2.3.0.weight - torch.Size([72, 144, 1, 1]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.2.3.1.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.2.3.1.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.0.0.0.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.0.0.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.0.0.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.0.1.0.weight - torch.Size([18, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.0.1.1.weight - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.0.1.1.bias - torch.Size([18]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.0.2.0.weight - torch.Size([144, 18, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.0.2.1.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.0.2.1.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.1.0.0.weight - torch.Size([36, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.1.0.1.weight - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.1.0.1.bias - torch.Size([36]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.1.1.0.weight - torch.Size([144, 36, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.1.1.1.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.1.1.1.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.2.0.0.weight - torch.Size([144, 72, 3, 3]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.2.0.1.weight - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

backbone.stage4.1.fuse_layers.3.2.0.1.bias - torch.Size([144]): 
PretrainedInit: load from open-mmlab://msra/hrnetv2_w18_small 

decode_head.0.conv_seg.weight - torch.Size([2, 270, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.0.conv_seg.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.0.convs.0.conv.weight - torch.Size([270, 270, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.0.convs.0.bn.weight - torch.Size([270]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.0.convs.0.bn.bias - torch.Size([270]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.conv_seg.weight - torch.Size([2, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.conv_seg.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.key_project.0.conv.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.key_project.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.key_project.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.key_project.1.conv.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.key_project.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.key_project.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.query_project.0.conv.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.query_project.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.query_project.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.query_project.1.conv.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.query_project.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.query_project.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.value_project.conv.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.value_project.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.value_project.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.out_project.conv.weight - torch.Size([512, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.out_project.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.out_project.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.bottleneck.conv.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.object_context_block.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.bottleneck.conv.weight - torch.Size([512, 270, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  

decode_head.1.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeEncoderDecoder  
2023/05/10 12:26:03 - mmengine - INFO - Load checkpoint from https://download.openmmlab.com/mmsegmentation/v0.5/ocrnet/ocrnet_hr18s_4xb2-40k_cityscapes-512x1024/ocrnet_hr18s_4xb2-40k_cityscapes-512x1024_20230227_145026-6c052a14.pth
2023/05/10 12:26:03 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/05/10 12:26:03 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/05/10 12:26:03 - mmengine - INFO - Checkpoints will be saved to /content/mmsegmentation/work_dirs/final.
2023/05/10 12:27:16 - mmengine - INFO - Epoch(train) [1][ 50/649]  lr: 2.3527e-03  eta: 1:18:26  time: 1.2978  data_time: 1.0330  memory: 10125  loss: 0.0513  decode_0.loss_ce: 0.0334  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0179  decode_1.acc_seg: 100.0000
2023/05/10 12:28:16 - mmengine - INFO - Epoch(train) [1][100/649]  lr: 2.3735e-03  eta: 1:09:46  time: 1.1534  data_time: 0.8846  memory: 6675  loss: 0.0181  decode_0.loss_ce: 0.0110  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0072  decode_1.acc_seg: 100.0000
2023/05/10 12:29:11 - mmengine - INFO - Epoch(train) [1][150/649]  lr: 7.5498e-04  eta: 1:04:36  time: 0.8991  data_time: 0.6330  memory: 6676  loss: 0.0177  decode_0.loss_ce: 0.0102  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0075  decode_1.acc_seg: 100.0000
2023/05/10 12:30:09 - mmengine - INFO - Epoch(train) [1][200/649]  lr: 1.2209e-04  eta: 1:02:30  time: 1.1724  data_time: 0.9053  memory: 6676  loss: 0.0130  decode_0.loss_ce: 0.0077  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0053  decode_1.acc_seg: 100.0000
2023/05/10 12:31:08 - mmengine - INFO - Epoch(train) [1][250/649]  lr: 1.2209e-04  eta: 1:00:58  time: 0.9523  data_time: 0.6849  memory: 6675  loss: 0.0114  decode_0.loss_ce: 0.0071  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0044  decode_1.acc_seg: 100.0000
2023/05/10 12:32:05 - mmengine - INFO - Epoch(train) [1][300/649]  lr: 1.2209e-04  eta: 0:59:14  time: 1.2970  data_time: 1.0288  memory: 6675  loss: 0.0136  decode_0.loss_ce: 0.0081  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0055  decode_1.acc_seg: 100.0000
2023/05/10 12:33:03 - mmengine - INFO - Epoch(train) [1][350/649]  lr: 1.2209e-04  eta: 0:57:53  time: 1.1063  data_time: 0.8381  memory: 6676  loss: 0.0089  decode_0.loss_ce: 0.0054  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0035  decode_1.acc_seg: 100.0000
2023/05/10 12:34:02 - mmengine - INFO - Epoch(train) [1][400/649]  lr: 1.2209e-04  eta: 0:56:46  time: 1.1413  data_time: 0.8751  memory: 6675  loss: 0.0133  decode_0.loss_ce: 0.0077  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0055  decode_1.acc_seg: 100.0000
2023/05/10 12:34:59 - mmengine - INFO - Epoch(train) [1][450/649]  lr: 1.2209e-04  eta: 0:55:32  time: 1.2085  data_time: 0.9438  memory: 6675  loss: 0.0149  decode_0.loss_ce: 0.0087  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0062  decode_1.acc_seg: 100.0000
2023/05/10 12:35:56 - mmengine - INFO - Epoch(train) [1][500/649]  lr: 1.2209e-04  eta: 0:54:18  time: 1.0618  data_time: 0.7927  memory: 6676  loss: 0.0121  decode_0.loss_ce: 0.0070  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0050  decode_1.acc_seg: 100.0000
2023/05/10 12:36:51 - mmengine - INFO - Epoch(train) [1][550/649]  lr: 1.2209e-04  eta: 0:52:54  time: 1.0561  data_time: 0.7913  memory: 6676  loss: 0.0137  decode_0.loss_ce: 0.0079  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0058  decode_1.acc_seg: 100.0000
2023/05/10 12:37:48 - mmengine - INFO - Epoch(train) [1][600/649]  lr: 1.2209e-04  eta: 0:51:48  time: 1.2041  data_time: 0.9378  memory: 6676  loss: 0.0119  decode_0.loss_ce: 0.0071  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0048  decode_1.acc_seg: 100.0000
2023/05/10 12:38:50 - mmengine - INFO - Exp name: ocrnet_hr18s_4xb2-40k_cityscapes-512x1024_20230510_122503
2023/05/10 12:38:52 - mmengine - INFO - Epoch(train) [1][650/649]  lr: 1.2209e-04  eta: 0:51:09  time: 1.0643  data_time: 0.7984  memory: 6675  loss: 0.0114  decode_0.loss_ce: 0.0067  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0046  decode_1.acc_seg: 100.0000
2023/05/10 12:39:47 - mmengine - INFO - Epoch(train) [1][700/649]  lr: 1.2209e-04  eta: 0:49:56  time: 1.2638  data_time: 0.9990  memory: 6675  loss: 0.0126  decode_0.loss_ce: 0.0073  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0052  decode_1.acc_seg: 100.0000
2023/05/10 12:40:41 - mmengine - INFO - Epoch(train) [1][750/649]  lr: 1.2209e-04  eta: 0:48:43  time: 0.8677  data_time: 0.6013  memory: 6675  loss: 0.0117  decode_0.loss_ce: 0.0068  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0049  decode_1.acc_seg: 100.0000
2023/05/10 12:41:35 - mmengine - INFO - Epoch(train) [1][800/649]  lr: 1.2209e-04  eta: 0:47:29  time: 1.1378  data_time: 0.8701  memory: 6676  loss: 0.0130  decode_0.loss_ce: 0.0074  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0056  decode_1.acc_seg: 100.0000
2023/05/10 12:42:26 - mmengine - INFO - Epoch(train) [1][850/649]  lr: 1.2209e-04  eta: 0:46:11  time: 1.0547  data_time: 0.7895  memory: 6676  loss: 0.0096  decode_0.loss_ce: 0.0057  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0039  decode_1.acc_seg: 100.0000
2023/05/10 12:43:21 - mmengine - INFO - Epoch(train) [1][900/649]  lr: 1.2209e-04  eta: 0:45:04  time: 1.0693  data_time: 0.8021  memory: 6675  loss: 0.0115  decode_0.loss_ce: 0.0067  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0048  decode_1.acc_seg: 100.0000
2023/05/10 12:44:13 - mmengine - INFO - Epoch(train) [1][950/649]  lr: 1.2209e-04  eta: 0:43:53  time: 1.1203  data_time: 0.8517  memory: 6675  loss: 0.0085  decode_0.loss_ce: 0.0049  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0036  decode_1.acc_seg: 100.0000
2023/05/10 12:45:11 - mmengine - INFO - Exp name: ocrnet_hr18s_4xb2-40k_cityscapes-512x1024_20230510_122503
2023/05/10 12:45:11 - mmengine - INFO - Epoch(train) [1][1000/649]  lr: 1.2209e-04  eta: 0:42:58  time: 1.2093  data_time: 0.9433  memory: 6675  loss: 0.0108  decode_0.loss_ce: 0.0063  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0045  decode_1.acc_seg: 100.0000
2023/05/10 12:45:11 - mmengine - INFO - Saving checkpoint at 1000 iterations
2023/05/10 12:46:06 - mmengine - INFO - Epoch(train) [1][1050/649]  lr: 1.2209e-04  eta: 0:41:55  time: 1.0803  data_time: 0.8133  memory: 6675  loss: 0.0092  decode_0.loss_ce: 0.0054  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0037  decode_1.acc_seg: 100.0000
2023/05/10 12:46:58 - mmengine - INFO - Epoch(train) [1][1100/649]  lr: 1.2209e-04  eta: 0:40:48  time: 1.0472  data_time: 0.7798  memory: 6675  loss: 0.0122  decode_0.loss_ce: 0.0069  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0052  decode_1.acc_seg: 100.0000
2023/05/10 12:47:58 - mmengine - INFO - Epoch(train) [1][1150/649]  lr: 1.2209e-04  eta: 0:39:55  time: 1.3097  data_time: 1.0445  memory: 6675  loss: 0.0109  decode_0.loss_ce: 0.0063  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0046  decode_1.acc_seg: 100.0000
2023/05/10 12:48:54 - mmengine - INFO - Epoch(train) [1][1200/649]  lr: 1.2209e-04  eta: 0:38:56  time: 1.1372  data_time: 0.8690  memory: 6676  loss: 0.0104  decode_0.loss_ce: 0.0061  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0043  decode_1.acc_seg: 100.0000
2023/05/10 12:49:52 - mmengine - INFO - Epoch(train) [1][1250/649]  lr: 1.2209e-04  eta: 0:38:01  time: 1.1967  data_time: 0.9305  memory: 6675  loss: 0.0102  decode_0.loss_ce: 0.0059  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0043  decode_1.acc_seg: 100.0000
2023/05/10 12:50:51 - mmengine - INFO - Epoch(train) [1][1300/649]  lr: 1.2209e-04  eta: 0:37:07  time: 1.0723  data_time: 0.8052  memory: 6676  loss: 0.0114  decode_0.loss_ce: 0.0066  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0048  decode_1.acc_seg: 100.0000
2023/05/10 12:51:48 - mmengine - INFO - Epoch(train) [1][1350/649]  lr: 1.2209e-04  eta: 0:36:09  time: 1.3806  data_time: 1.1154  memory: 6675  loss: 0.0100  decode_0.loss_ce: 0.0058  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0042  decode_1.acc_seg: 100.0000
2023/05/10 12:52:44 - mmengine - INFO - Epoch(train) [1][1400/649]  lr: 1.2209e-04  eta: 0:35:09  time: 1.1161  data_time: 0.8499  memory: 6675  loss: 0.0097  decode_0.loss_ce: 0.0057  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0040  decode_1.acc_seg: 100.0000
2023/05/10 12:53:36 - mmengine - INFO - Epoch(train) [1][1450/649]  lr: 1.2209e-04  eta: 0:34:06  time: 0.8439  data_time: 0.5764  memory: 6676  loss: 0.0100  decode_0.loss_ce: 0.0057  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0044  decode_1.acc_seg: 100.0000
2023/05/10 12:54:25 - mmengine - INFO - Epoch(train) [1][1500/649]  lr: 1.2209e-04  eta: 0:32:59  time: 1.0296  data_time: 0.7627  memory: 6676  loss: 0.0083  decode_0.loss_ce: 0.0049  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0034  decode_1.acc_seg: 100.0000
2023/05/10 12:55:17 - mmengine - INFO - Epoch(train) [1][1550/649]  lr: 1.2209e-04  eta: 0:31:58  time: 1.0687  data_time: 0.8004  memory: 6676  loss: 0.0085  decode_0.loss_ce: 0.0050  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0035  decode_1.acc_seg: 100.0000
2023/05/10 12:56:18 - mmengine - INFO - Epoch(train) [1][1600/649]  lr: 1.2209e-04  eta: 0:31:05  time: 1.4292  data_time: 1.1601  memory: 6675  loss: 0.0096  decode_0.loss_ce: 0.0055  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0042  decode_1.acc_seg: 100.0000
2023/05/10 12:57:09 - mmengine - INFO - Epoch(train) [1][1650/649]  lr: 1.2209e-04  eta: 0:30:03  time: 0.9603  data_time: 0.6933  memory: 6675  loss: 0.0081  decode_0.loss_ce: 0.0048  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0033  decode_1.acc_seg: 100.0000
2023/05/10 12:57:56 - mmengine - INFO - Epoch(train) [1][1700/649]  lr: 1.2209e-04  eta: 0:28:58  time: 0.8699  data_time: 0.6035  memory: 6676  loss: 0.0095  decode_0.loss_ce: 0.0055  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0040  decode_1.acc_seg: 100.0000
2023/05/10 12:58:52 - mmengine - INFO - Epoch(train) [1][1750/649]  lr: 1.2209e-04  eta: 0:28:01  time: 1.0838  data_time: 0.8152  memory: 6676  loss: 0.0094  decode_0.loss_ce: 0.0054  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0040  decode_1.acc_seg: 100.0000
2023/05/10 12:59:49 - mmengine - INFO - Epoch(train) [1][1800/649]  lr: 1.2209e-04  eta: 0:27:06  time: 1.1742  data_time: 0.9080  memory: 6676  loss: 0.0086  decode_0.loss_ce: 0.0050  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0036  decode_1.acc_seg: 100.0000
2023/05/10 13:00:38 - mmengine - INFO - Epoch(train) [1][1850/649]  lr: 1.2209e-04  eta: 0:26:05  time: 1.0846  data_time: 0.8208  memory: 6675  loss: 0.0086  decode_0.loss_ce: 0.0049  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0037  decode_1.acc_seg: 100.0000
2023/05/10 13:01:29 - mmengine - INFO - Epoch(train) [1][1900/649]  lr: 1.2209e-04  eta: 0:25:04  time: 0.9956  data_time: 0.7301  memory: 6676  loss: 0.0076  decode_0.loss_ce: 0.0044  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0032  decode_1.acc_seg: 100.0000
2023/05/10 13:02:23 - mmengine - INFO - Epoch(train) [1][1950/649]  lr: 1.2209e-04  eta: 0:24:07  time: 1.0726  data_time: 0.8075  memory: 6675  loss: 0.0082  decode_0.loss_ce: 0.0047  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0035  decode_1.acc_seg: 100.0000
2023/05/10 13:03:19 - mmengine - INFO - Exp name: ocrnet_hr18s_4xb2-40k_cityscapes-512x1024_20230510_122503
2023/05/10 13:03:19 - mmengine - INFO - Epoch(train) [1][2000/649]  lr: 1.2209e-04  eta: 0:23:12  time: 1.0472  data_time: 0.7821  memory: 6675  loss: 0.0077  decode_0.loss_ce: 0.0045  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0033  decode_1.acc_seg: 100.0000
2023/05/10 13:03:19 - mmengine - INFO - Saving checkpoint at 2000 iterations
2023/05/10 13:04:10 - mmengine - INFO - Epoch(train) [1][2050/649]  lr: 1.2209e-04  eta: 0:22:13  time: 0.9912  data_time: 0.7242  memory: 6675  loss: 0.0089  decode_0.loss_ce: 0.0051  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0037  decode_1.acc_seg: 100.0000
2023/05/10 13:05:02 - mmengine - INFO - Epoch(train) [1][2100/649]  lr: 1.2209e-04  eta: 0:21:15  time: 1.0806  data_time: 0.8117  memory: 6675  loss: 0.0086  decode_0.loss_ce: 0.0049  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0037  decode_1.acc_seg: 100.0000
2023/05/10 13:05:51 - mmengine - INFO - Epoch(train) [1][2150/649]  lr: 1.2209e-04  eta: 0:20:16  time: 0.9248  data_time: 0.6586  memory: 6676  loss: 0.0068  decode_0.loss_ce: 0.0039  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0029  decode_1.acc_seg: 100.0000
2023/05/10 13:06:50 - mmengine - INFO - Epoch(train) [1][2200/649]  lr: 1.2209e-04  eta: 0:19:22  time: 1.2078  data_time: 0.9418  memory: 6676  loss: 0.0084  decode_0.loss_ce: 0.0049  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0035  decode_1.acc_seg: 100.0000
2023/05/10 13:07:45 - mmengine - INFO - Epoch(train) [1][2250/649]  lr: 1.2209e-04  eta: 0:18:26  time: 0.9562  data_time: 0.6919  memory: 6675  loss: 0.0083  decode_0.loss_ce: 0.0049  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0034  decode_1.acc_seg: 100.0000
2023/05/10 13:08:35 - mmengine - INFO - Epoch(train) [1][2300/649]  lr: 1.2209e-04  eta: 0:17:28  time: 1.1354  data_time: 0.8689  memory: 6675  loss: 0.0087  decode_0.loss_ce: 0.0050  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0037  decode_1.acc_seg: 100.0000
2023/05/10 13:09:27 - mmengine - INFO - Epoch(train) [1][2350/649]  lr: 1.2209e-04  eta: 0:16:31  time: 1.0738  data_time: 0.8057  memory: 6675  loss: 0.0070  decode_0.loss_ce: 0.0041  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0029  decode_1.acc_seg: 100.0000
2023/05/10 13:10:12 - mmengine - INFO - Epoch(train) [1][2400/649]  lr: 1.2209e-04  eta: 0:15:32  time: 1.0266  data_time: 0.7602  memory: 6675  loss: 0.0059  decode_0.loss_ce: 0.0034  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0024  decode_1.acc_seg: 100.0000
2023/05/10 13:11:10 - mmengine - INFO - Epoch(train) [1][2450/649]  lr: 1.2209e-04  eta: 0:14:38  time: 1.1368  data_time: 0.8676  memory: 6675  loss: 0.0071  decode_0.loss_ce: 0.0041  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0030  decode_1.acc_seg: 100.0000
2023/05/10 13:12:07 - mmengine - INFO - Epoch(train) [1][2500/649]  lr: 1.2209e-04  eta: 0:13:43  time: 1.4091  data_time: 1.1435  memory: 6675  loss: 0.0078  decode_0.loss_ce: 0.0046  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0033  decode_1.acc_seg: 100.0000
2023/05/10 13:12:58 - mmengine - INFO - Epoch(train) [1][2550/649]  lr: 1.2209e-04  eta: 0:12:47  time: 0.8160  data_time: 0.5481  memory: 6676  loss: 0.0071  decode_0.loss_ce: 0.0042  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0029  decode_1.acc_seg: 100.0000
2023/05/10 13:13:52 - mmengine - INFO - Epoch(train) [1][2600/649]  lr: 1.2209e-04  eta: 0:11:51  time: 1.0049  data_time: 0.7383  memory: 6676  loss: 0.0076  decode_0.loss_ce: 0.0044  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0033  decode_1.acc_seg: 100.0000
2023/05/10 13:14:49 - mmengine - INFO - Epoch(train) [1][2650/649]  lr: 1.2209e-04  eta: 0:10:57  time: 1.1129  data_time: 0.8488  memory: 6676  loss: 0.0083  decode_0.loss_ce: 0.0048  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0035  decode_1.acc_seg: 100.0000
2023/05/10 13:15:36 - mmengine - INFO - Epoch(train) [1][2700/649]  lr: 1.2209e-04  eta: 0:10:00  time: 0.8834  data_time: 0.6188  memory: 6676  loss: 0.0072  decode_0.loss_ce: 0.0042  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0030  decode_1.acc_seg: 100.0000
2023/05/10 13:16:30 - mmengine - INFO - Epoch(train) [1][2750/649]  lr: 1.2209e-04  eta: 0:09:04  time: 1.3239  data_time: 1.0594  memory: 6676  loss: 0.0070  decode_0.loss_ce: 0.0041  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0029  decode_1.acc_seg: 100.0000
2023/05/10 13:17:25 - mmengine - INFO - Epoch(train) [1][2800/649]  lr: 1.2209e-04  eta: 0:08:09  time: 1.2612  data_time: 0.9947  memory: 6675  loss: 0.0063  decode_0.loss_ce: 0.0036  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0027  decode_1.acc_seg: 100.0000
2023/05/10 13:18:15 - mmengine - INFO - Epoch(train) [1][2850/649]  lr: 1.2209e-04  eta: 0:07:14  time: 0.8193  data_time: 0.5497  memory: 6675  loss: 0.0077  decode_0.loss_ce: 0.0044  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0033  decode_1.acc_seg: 100.0000
2023/05/10 13:19:08 - mmengine - INFO - Epoch(train) [1][2900/649]  lr: 1.2209e-04  eta: 0:06:18  time: 1.1054  data_time: 0.8359  memory: 6676  loss: 0.0064  decode_0.loss_ce: 0.0037  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0028  decode_1.acc_seg: 100.0000
2023/05/10 13:20:02 - mmengine - INFO - Epoch(train) [1][2950/649]  lr: 1.2209e-04  eta: 0:05:23  time: 0.9311  data_time: 0.6650  memory: 6676  loss: 0.0072  decode_0.loss_ce: 0.0042  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0030  decode_1.acc_seg: 100.0000
2023/05/10 13:20:54 - mmengine - INFO - Exp name: ocrnet_hr18s_4xb2-40k_cityscapes-512x1024_20230510_122503
2023/05/10 13:20:54 - mmengine - INFO - Epoch(train) [1][3000/649]  lr: 1.2209e-04  eta: 0:04:28  time: 0.8016  data_time: 0.5374  memory: 6676  loss: 0.0064  decode_0.loss_ce: 0.0037  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0027  decode_1.acc_seg: 100.0000
2023/05/10 13:20:54 - mmengine - INFO - Saving checkpoint at 3000 iterations
2023/05/10 13:21:48 - mmengine - INFO - Epoch(train) [1][3050/649]  lr: 1.2209e-04  eta: 0:03:33  time: 0.9013  data_time: 0.6338  memory: 6675  loss: 0.0072  decode_0.loss_ce: 0.0040  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0031  decode_1.acc_seg: 100.0000
2023/05/10 13:22:37 - mmengine - INFO - Epoch(train) [1][3100/649]  lr: 1.2209e-04  eta: 0:02:38  time: 0.9659  data_time: 0.6995  memory: 6676  loss: 0.0055  decode_0.loss_ce: 0.0032  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0023  decode_1.acc_seg: 100.0000
2023/05/10 13:23:33 - mmengine - INFO - Epoch(train) [1][3150/649]  lr: 1.2209e-04  eta: 0:01:44  time: 1.3050  data_time: 1.0389  memory: 6676  loss: 0.0068  decode_0.loss_ce: 0.0039  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0029  decode_1.acc_seg: 100.0000
2023/05/10 13:24:21 - mmengine - INFO - Epoch(train) [1][3200/649]  lr: 1.2209e-04  eta: 0:00:49  time: 0.9899  data_time: 0.7248  memory: 6676  loss: 0.0067  decode_0.loss_ce: 0.0038  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0029  decode_1.acc_seg: 100.0000
2023/05/10 13:25:09 - mmengine - INFO - Saving checkpoint at 3245 iterations
2023/05/10 13:25:14 - mmengine - INFO - Epoch(train) [1][3250/649]  lr: 1.2209e-04  eta: -1 day, 23:59:55  time: 1.0890  data_time: 0.8215  memory: 6675  loss: 0.0066  decode_0.loss_ce: 0.0038  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0028  decode_1.acc_seg: 100.0000
2023/05/10 13:26:08 - mmengine - INFO - Epoch(train) [1][3300/649]  lr: 1.2209e-04  eta: -1 day, 23:59:00  time: 1.0680  data_time: 0.8037  memory: 6675  loss: 0.0070  decode_0.loss_ce: 0.0039  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0031  decode_1.acc_seg: 100.0000
2023/05/10 13:26:56 - mmengine - INFO - Epoch(train) [1][3350/649]  lr: 1.2209e-04  eta: -1 day, 23:58:06  time: 1.0602  data_time: 0.7924  memory: 6675  loss: 0.0064  decode_0.loss_ce: 0.0037  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0027  decode_1.acc_seg: 100.0000
2023/05/10 13:27:44 - mmengine - INFO - Epoch(train) [1][3400/649]  lr: 1.2209e-04  eta: -1 day, 23:57:12  time: 0.7474  data_time: 0.4808  memory: 6676  loss: 0.0066  decode_0.loss_ce: 0.0038  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0028  decode_1.acc_seg: 100.0000
2023/05/10 13:28:41 - mmengine - INFO - Epoch(train) [1][3450/649]  lr: 1.2209e-04  eta: -1 day, 23:56:17  time: 1.1700  data_time: 0.9028  memory: 6676  loss: 0.0063  decode_0.loss_ce: 0.0036  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0027  decode_1.acc_seg: 100.0000
2023/05/10 13:29:36 - mmengine - INFO - Epoch(train) [1][3500/649]  lr: 1.2209e-04  eta: -1 day, 23:55:23  time: 1.1419  data_time: 0.8745  memory: 6675  loss: 0.0051  decode_0.loss_ce: 0.0030  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0021  decode_1.acc_seg: 100.0000
2023/05/10 13:30:26 - mmengine - INFO - Epoch(train) [1][3550/649]  lr: 1.2209e-04  eta: -1 day, 23:54:29  time: 0.9419  data_time: 0.6773  memory: 6675  loss: 0.0057  decode_0.loss_ce: 0.0033  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0024  decode_1.acc_seg: 100.0000
2023/05/10 13:31:13 - mmengine - INFO - Epoch(train) [1][3600/649]  lr: 1.2209e-04  eta: -1 day, 23:53:35  time: 0.8707  data_time: 0.6040  memory: 6676  loss: 0.0071  decode_0.loss_ce: 0.0040  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0031  decode_1.acc_seg: 100.0000
2023/05/10 13:32:09 - mmengine - INFO - Epoch(train) [1][3650/649]  lr: 1.2209e-04  eta: -1 day, 23:52:40  time: 1.0495  data_time: 0.7829  memory: 6675  loss: 0.0073  decode_0.loss_ce: 0.0042  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0031  decode_1.acc_seg: 100.0000
2023/05/10 13:33:02 - mmengine - INFO - Epoch(train) [1][3700/649]  lr: 1.2209e-04  eta: -1 day, 23:51:46  time: 1.1829  data_time: 0.9152  memory: 6675  loss: 0.0062  decode_0.loss_ce: 0.0036  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0026  decode_1.acc_seg: 100.0000
2023/05/10 13:33:57 - mmengine - INFO - Epoch(train) [1][3750/649]  lr: 1.2209e-04  eta: -1 day, 23:50:52  time: 1.1765  data_time: 0.9100  memory: 6675  loss: 0.0068  decode_0.loss_ce: 0.0038  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0030  decode_1.acc_seg: 100.0000
2023/05/10 13:34:50 - mmengine - INFO - Epoch(train) [1][3800/649]  lr: 1.2209e-04  eta: -1 day, 23:49:58  time: 1.0038  data_time: 0.7333  memory: 6675  loss: 0.0071  decode_0.loss_ce: 0.0040  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0031  decode_1.acc_seg: 100.0000
2023/05/10 13:35:42 - mmengine - INFO - Epoch(train) [1][3850/649]  lr: 1.2209e-04  eta: -1 day, 23:49:04  time: 0.9221  data_time: 0.6524  memory: 6676  loss: 0.0056  decode_0.loss_ce: 0.0032  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0025  decode_1.acc_seg: 100.0000
2023/05/10 13:36:39 - mmengine - INFO - Epoch(train) [1][3900/649]  lr: 1.2209e-04  eta: -1 day, 23:48:09  time: 1.1057  data_time: 0.8387  memory: 6675  loss: 0.0068  decode_0.loss_ce: 0.0038  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0030  decode_1.acc_seg: 100.0000
2023/05/10 13:37:29 - mmengine - INFO - Epoch(train) [1][3950/649]  lr: 1.2209e-04  eta: -1 day, 23:47:15  time: 1.1468  data_time: 0.8812  memory: 6676  loss: 0.0046  decode_0.loss_ce: 0.0027  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0020  decode_1.acc_seg: 100.0000
2023/05/10 13:38:20 - mmengine - INFO - Exp name: ocrnet_hr18s_4xb2-40k_cityscapes-512x1024_20230510_122503
2023/05/10 13:38:20 - mmengine - INFO - Epoch(train) [1][4000/649]  lr: 1.2209e-04  eta: -1 day, 23:46:22  time: 1.3228  data_time: 1.0561  memory: 6675  loss: 0.0060  decode_0.loss_ce: 0.0034  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0026  decode_1.acc_seg: 100.0000
2023/05/10 13:38:20 - mmengine - INFO - Saving checkpoint at 4000 iterations
2023/05/10 13:39:13 - mmengine - INFO - Epoch(train) [1][4050/649]  lr: 1.2209e-04  eta: -1 day, 23:45:28  time: 1.0602  data_time: 0.7947  memory: 6676  loss: 0.0068  decode_0.loss_ce: 0.0039  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0029  decode_1.acc_seg: 100.0000
2023/05/10 13:40:10 - mmengine - INFO - Epoch(train) [1][4100/649]  lr: 1.2209e-04  eta: -1 day, 23:44:33  time: 1.0350  data_time: 0.7657  memory: 6675  loss: 0.0065  decode_0.loss_ce: 0.0037  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0028  decode_1.acc_seg: 100.0000
2023/05/10 13:41:00 - mmengine - INFO - Epoch(train) [1][4150/649]  lr: 1.2209e-04  eta: -1 day, 23:43:40  time: 1.0131  data_time: 0.7466  memory: 6675  loss: 0.0068  decode_0.loss_ce: 0.0039  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0028  decode_1.acc_seg: 100.0000
2023/05/10 13:41:50 - mmengine - INFO - Epoch(train) [1][4200/649]  lr: 1.2209e-04  eta: -1 day, 23:42:47  time: 1.1733  data_time: 0.9070  memory: 6675  loss: 0.0056  decode_0.loss_ce: 0.0032  decode_0.acc_seg: 100.0000  decode_1.loss_ce: 0.0024  decode_1.acc_seg: 100.0000
